Overview
--------
The following operating systems are supported:
* Linux
* Mac OS X
* FreeBSD
* NetBSD
* OpenIndiana
* Android

These are not supported by squashfuse_ll, just squashfuse:

These are only supported by the squashfuse_ls demo:
* Windows

These don't seem to work yet:
* Solaris
* QNX
* Minix
* Haiku
* Hurd

These don't have FUSE:
* iOS
* OpenBSD
* DragonFly BSD - NetBSD's `puffs' is in HEAD
* Commercial UNIX: AIX, HP-UX, etc


Details
-------
Systems are marked with the last tested version of squashfuse in square
brackets, eg: [0.1]

* Linux
  + Versions: Kernel 2.4.20 or later, most distros since ~2004
  + Tested on:
    - Ubuntu / Trusty  14.04             / i386, amd64           [0.2]
    - Ubuntu / Precise 12.04             / amd64                 [0.1]
    - Ubuntu / Natty   11.10             / amd64                 [0.1]
    - Ubuntu / Lucid   10.04             / amd64                 [0.1]
    - Debian / squeeze  6.0              / i386, ppc             [0.1]
    - CentOS / 3.9                       / i386      / FUSE 2.5  ]0.1]
  + Requirements: CONFIG_FUSE_FS kernel option
  + Packages:
    - apt-get
      Build: gcc make libc-dev libfuse-dev libz-dev liblzo2-dev
        liblzma-dev liblz4-dev libattr1-dev pkg-config
      Runtime: libfuse2 zlib1g liblzo2-2 liblzma2

* Mac OS X
  + Versions: Mac OS X 10.4 and later
  + Tested on:
    - 10.9 Mavericks    / x86_64 / OSXFUSE                      [0.2]
    - 10.7 Lion         / x86_64 / Tuxera FUSE, fuse4x, OSXFUSE [0.1]
    - 10.6 Snow Leopard / x86_64 / MacFUSE, fuse4x              [0.1]
    - 10.5 Leopard      / ppc    / MacFUSE                      [0.1]
    - 10.4 Tiger        / i386   / MacFUSE                      [0.1]
  + Requirements
    - Command-line developer tools
    - OSXFUSE, fuse4x or MacFUSE: http://osxfuse.github.com/,
      http://fuse4x.org/, http://code.google.com/p/macfuse/
  + Packages:
    - Not necessary if you just want a basic zlib-supporting squashfuse.
    - Some package managers require the full Xcode for FUSE,
      not just command-line tools.
    - MacPorts
      port install lzo2 liblzma zlib lz4 osxfuse
    - Fink
      fink install automake1.11 libtool2
      fink install lzo2 liblzma5 osxfuse-dev osxfuse-shlibs pkgconfig
    - Homebrew
      brew install lzo xz lz4 osxfuse
      # follow instructions from `brew info osxfuse'
  + Configure: If using a package manager, use --with-lzo=/wherever and/or
    --with-lz4=/wherever
  + Notes:
    - OS X uses a different naming scheme for extended attributes, so
      they may not be very useful
    - LZ4 often builds a dynamic liblz4 with a bad install_name on OS X.
      Either link statically, or use install_name_tool to correct it.

* FreeBSD
  + Versions: FreeBSD 6.0 and later
  + Tested on:
    - FreeBSD 10.0 / amd64 [0.2]
    - FreeBSD 9.0  / amd64 [0.1]
  + Packages: From ports or packages: fusefs-libs lzo2
    - On versions less than 10.0, also fusefs-kmod
  + Configure: ./configure --with-lzo=/usr/local
  + Notes:
    - You may have to load the kernel module with `kldload fuse'
    - You may have to set `sysctl vfs.usermount=1'
    - FreeBSD FUSE doesn't support extended attributes

* NetBSD
  + Versions: NetBSD 6.0 and later
  + Tested on: NetBSD 6.0 BETA / i386 [0.1]
  + Requirements: puffs enabled in kernel (present by default)
  + Packages: From pkgsrc: libfuse libperfuse lzo
  + Configure: ./configure --with-fuse=/usr/pkg --with-lzo=/usr/pkg
  + Notes:
    - Mounting seems to require root
    - NetBSD FUSE doesn't support extended attributes
    - perfused crashes mysteriously on some archives

* OpenIndiana
  + Tested on: OpenIndiana 151a / i386 [0.1]
  + Requirements: C compiler: gcc or Sun Studio 12.3 work
  + Packages: From `Spec Files Extra` repo: fusefs libfuse lzo xz
  + Installation: Must ensure device is where libfuse expects it:
    ln -s "/devices/pseudo/fuse@0:fuse" /dev/fuse
  + Notes:
    - Mounting requires root
    - OpenIndiana FUSE doesn't support extended attributes

* Android
  + Tested on: Android emulator / 2.3.3 / armel [0.1]
  + Requirements:
    - CONFIG_FUSE_FS enabled in kernel. Most Android kernels have this
      disabled, so the kernel must be rebuilt.
    - fuse-android: https://github.com/seth-hg/fuse-android
  + Configure:
    - Cross-compile from Linux by passing --host flag to configure
    - Use CPPFLAGS/LDFLAGS/LIBS that fuse-android used for fusexmp
    - May need `-nodefaultlibs' in LDFLAGS, since configure likes linking
      and compiling together in a single gcc invokation, and
      Android's build system doesn't.

* Windows
  + Only squashfuse_ls, there's no good FUSE on Windows
  + Tested on: Windows 7 / x64 [0.2]
  + Requirements:
    - A compiler. I've tested with Visual Studio 2013 Express
  + Configure: No need to run ./configure, just use the Visual Studio solution
    file.
  + Notes: For Unicode output, you may need to setup a different console font,
    and run `chcp 65001' to get the UTF-8 codepage.
